import React from 'react';
import { Tool, ToolCategory } from './types';

// Import tool components
import { CaseConverter } from './components/tools/text/CaseConverter';
import { WordCounter } from './components/tools/text/WordCounter';
import { LoremIpsumGenerator } from './components/tools/text/LoremIpsumGenerator';
import { JsonFormatter } from './components/tools/text/JsonFormatter';
import { Base64Converter } from './components/tools/text/Base64Converter';
import { UrlEncoder } from './components/tools/text/UrlEncoder';
import { MarkdownPreviewer } from './components/tools/text/MarkdownPreviewer';
import { TextSorter } from './components/tools/text/TextSorter';
import { ImageToBase64 } from './components/tools/image/ImageToBase64';
import { ColorPickerFromImage } from './components/tools/image/ColorPickerFromImage';
import { FaviconGenerator } from './components/tools/image/FaviconGenerator';
import { AspectRatioCalculator } from './components/tools/image/AspectRatioCalculator';
import { SVGConverter } from './components/tools/image/SVGConverter';
import { ColorConverter } from './components/tools/color/ColorConverter';
import { GradientGenerator } from './components/tools/color/GradientGenerator';
import { ColorPaletteGenerator } from './components/tools/color/ColorPaletteGenerator';
import { ContrastChecker } from './components/tools/color/ContrastChecker';
import { ShadeAndTintGenerator } from './components/tools/color/ShadeAndTintGenerator';
import { QrCodeGenerator } from './components/tools/social/QrCodeGenerator';
import { YTThumbnailDownloader } from './components/tools/social/YTThumbnailDownloader';
import { MetaTagGenerator } from './components/tools/social/MetaTagGenerator';
import { PasswordGenerator } from './components/tools/developer/PasswordGenerator';
import { HashGenerator } from './components/tools/developer/HashGenerator';
import { UnixTimestampConverter } from './components/tools/developer/UnixTimestampConverter';
import { UserAgent } from './components/tools/developer/UserAgent';
import { IpAddress } from './components/tools/developer/IpAddress';
import { RegexTester } from './components/tools/developer/RegexTester';
import { JwtDecoder } from './components/tools/developer/JwtDecoder';
import { AdvancedScreenshotTool } from './components/tools/developer/AdvancedScreenshotTool';
import { CommitMessageGenerator } from './components/tools/developer/AICommitMessageGenerator';
import { CronJobParser } from './components/tools/developer/CronJobParser';
import { UUIDGenerator } from './components/tools/developer/UUIDGenerator';
import { JSONtoTypeConverter } from './components/tools/developer/JSONtoTypeConverter';
import { FileHashChecker } from './components/tools/developer/FileHashChecker';
import { DiffChecker } from './components/tools/text/DiffChecker';
import { CssFilterGenerator } from './components/tools/image/CssFilterGenerator';
import { ColorBlender } from './components/tools/color/ColorBlender';
import { SocialSharePreviewer } from './components/tools/social/SocialSharePreviewer';
import { UrlParser } from './components/tools/developer/UrlParser';
import { CharCodeConverter } from './components/tools/text/CharCodeConverter';
import { TocGenerator } from './components/tools/text/TocGenerator';
import { TextToSpeech } from './components/tools/text/TextToSpeech';
import { RegexExplainer } from './components/tools/text/RegexExplainer';
import { SvgPlaceholderGenerator } from './components/tools/image/SvgPlaceholderGenerator';
import { ImageInspector } from './components/tools/image/ImageInspector';
import { CssShapeGenerator } from './components/tools/image/CssShapeGenerator';
import { GrayscaleConverter } from './components/tools/image/GrayscaleConverter';
import { AccessibleColorSuggester } from './components/tools/color/AccessibleColorSuggester';
import { ColorNameFinder } from './components/tools/color/ColorNameFinder';
import { ImagePaletteExtractor } from './components/tools/color/ImagePaletteExtractor';
import { CssFilterPlayground } from './components/tools/color/CssFilterPlayground';
import { TweetThreader } from './components/tools/social/TweetThreader';
import { OgDebugger } from './components/tools/social/OgDebugger';
import { ReadabilityScore } from './components/tools/social/ReadabilityScore';
import { EmailSignatureGenerator } from './components/tools/social/EmailSignatureGenerator';
import { CssEasingVisualizer } from './components/tools/developer/CssEasingVisualizer';
import { HttpStatusCodeChecker } from './components/tools/developer/HttpStatusCodeChecker';
import { KeyboardEventFinder } from './components/tools/developer/KeyboardEventFinder';
import { BoxShadowGenerator } from './components/tools/developer/BoxShadowGenerator';
import { Slugify } from './components/tools/text/Slugify';
import { ImageResizer } from './components/tools/image/ImageResizer';
import { RandomColorGenerator } from './components/tools/color/RandomColorGenerator';
import { PlaceholderImageGenerator } from './components/tools/social/PlaceholderImageGenerator';
import { PxToRemConverter } from './components/tools/developer/PxToRemConverter';
import { MemeGenerator } from './components/tools/image/MemeGenerator';

// --- NEW TOOL IMPORTS (25) ---
import { FindAndReplace } from './components/tools/text/FindAndReplace';
import { DuplicateLineRemover } from './components/tools/text/DuplicateLineRemover';
import { ReverseText } from './components/tools/text/ReverseText';
import { Rot13Converter } from './components/tools/text/Rot13Converter';
import { TextStatistics } from './components/tools/text/TextStatistics';
import { ImageFlipper } from './components/tools/image/ImageFlipper';
import { ImageColorInverter } from './components/tools/image/ImageColorInverter';
import { ImageBorderAdder } from './components/tools/image/ImageBorderAdder';
import { ImageToAscii } from './components/tools/image/ImageToAscii';
import { ColorHarmonies } from './components/tools/color/ColorHarmonies';
import { TailwindShadeGenerator } from './components/tools/color/TailwindShadeGenerator';
import { WcagContrastGrid } from './components/tools/color/WcagContrastGrid';
import { AverageColorFinder } from './components/tools/color/AverageColorFinder';
import { GradientTextGenerator } from './components/tools/color/GradientTextGenerator';
import { HashtagCounter } from './components/tools/social/HashtagCounter';
import { YouTubeTimestampLink } from './components/tools/social/YouTubeTimestampLink';
import { TwitterPostPreview } from './components/tools/social/TwitterPostPreview';
import { ListFormatter } from './components/tools/social/ListFormatter';
import { LoremPicsumGenerator } from './components/tools/social/LoremPicsumGenerator';
import { CssUnitConverter } from './components/tools/developer/CssUnitConverter';
import { MimeTypeFinder } from './components/tools/developer/MimeTypeFinder';
import { HtmlEntityConverter } from './components/tools/developer/HtmlEntityConverter';
import { CssMinifier } from './components/tools/developer/CssMinifier';
import { CubicBezierGenerator } from './components/tools/developer/CubicBezierGenerator';
import { ImageCompressor } from './components/tools/image/ImageCompressor';

// --- NEW TOOL IMPORTS (10) ---
import { JsonToCsvConverter } from './components/tools/developer/JsonToCsvConverter';
import { TimezoneConverter } from './components/tools/developer/TimezoneConverter';
import { BaseConverter } from './components/tools/developer/BaseConverter';
import { SqlFormatter } from './components/tools/developer/SqlFormatter';
import { HmacGenerator } from './components/tools/developer/HmacGenerator';
import { MorseCodeConverter } from './components/tools/text/MorseCodeConverter';
import { ColorBlindnessSimulator } from './components/tools/color/ColorBlindnessSimulator';
import { ImageCropper } from './components/tools/image/ImageCropper';
import { CssGridLayoutGenerator } from './components/tools/developer/CssGridLayoutGenerator';
import { CssBlendModePreviewer } from './components/tools/color/CssBlendModePreviewer';

// --- HACKING TOOL IMPORTS (10) ---
import { SubnetCalculator } from './components/tools/hacking/SubnetCalculator';
import { WhoisLookup } from './components/tools/hacking/WhoisLookup';
import { DnsLookup } from './components/tools/hacking/DnsLookup';
import { ReverseIpLookup } from './components/tools/hacking/ReverseIpLookup';
import { SecurityHeaderScanner } from './components/tools/hacking/SecurityHeaderScanner';
import { XssPayloadGenerator } from './components/tools/hacking/XssPayloadGenerator';
import { CveSearch } from './components/tools/hacking/CveSearch';
import { ExifViewer } from './components/tools/hacking/ExifViewer';
import { PortScanner } from './components/tools/hacking/PortScanner';
import { PasswordStrengthAnalyzer } from './components/tools/hacking/PasswordStrengthAnalyzer';


// Icon components (Heroicons)
const Bars3BottomLeftIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12" /></svg>);
const HashtagIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M5.25 8.25h15m-16.5 7.5h15m-1.8-13.5l-3.9 19.5m-2.1-19.5l-3.9 19.5" /></svg>);
const DocumentIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" /></svg>);
const CodeBracketIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M14.25 9.75L16.5 12l-2.25 2.25m-4.5 0L7.5 12l2.25-2.25M6 20.25h12A2.25 2.25 0 0020.25 18V6A2.25 2.25 0 0018 3.75H6A2.25 2.25 0 003.75 6v12A2.25 2.25 0 006 20.25z" /></svg>);
const ArrowPathIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.667 0l3.181-3.183m-11.667 0l3.181-3.183a8.25 8.25 0 00-11.667 0l3.181 3.183" /></svg>);
const PhotoIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25z" /></svg>);
const SwatchIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9.53 16.122a3 3 0 00-5.78 1.128 2.25 2.25 0 01-2.4 2.245 4.5 4.5 0 008.4-2.245c0-.399-.078-.78-.22-1.128zm0 0a15.998 15.998 0 003.388-1.62m-5.043-.025a15.998 15.998 0 013.388-1.62m0 0a15.998 15.998 0 013.388-1.62m0 0a15.998 15.998 0 013.388-1.62m0 0a15.998 15.998 0 013.388-1.62m0 0a15.998 15.998 0 013.388-1.62M12 6.375a3.375 3.375 0 116.75 0 3.375 3.375 0 01-6.75 0z" /></svg>);
const EyeDropperIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 9.75L14.25 12m0 0l2.25 2.25M14.25 12l2.25-2.25M14.25 12L12 14.25m-2.58 4.92l-6.375-6.375a1.125 1.125 0 010-1.59L9.42 4.83c.211-.211.498-.33.796-.33H19.5a2.25 2.25 0 012.25 2.25v10.528c0 .298-.119.585-.33.796l-4.83 4.83a1.125 1.125 0 01-1.59 0l-6.375-6.375zm0 0l-4.83-4.83" /></svg>);
const SparklesIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.562L16.5 21.75l-.398-1.188a3.375 3.375 0 00-2.305-2.305L12.75 18l1.188-.398a3.375 3.375 0 002.305-2.305L16.5 14.25l.398 1.188a3.375 3.375 0 002.305 2.305l1.188.398-1.188.398a3.375 3.375 0 00-2.305 2.305z" /></svg>);
const ViewfinderCircleIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9A2.25 2.25 0 004.5 18.75z" /></svg>);
const QrCodeIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3.75 4.5A.75.75 0 014.5 3.75h4.5a.75.75 0 01.75.75v4.5a.75.75 0 01-.75.75h-4.5a.75.75 0 01-.75-.75v-4.5zM3.75 15a.75.75 0 01.75-.75h4.5a.75.75 0 01.75.75v4.5a.75.75 0 01-.75.75h-4.5a.75.75 0 01-.75-.75v-4.5zM15 3.75a.75.75 0 00-.75.75v4.5a.75.75 0 00.75.75h4.5a.75.75 0 00.75-.75v-4.5a.75.75 0 00-.75-.75h-4.5zM16.5 15h-1.875a.375.375 0 00-.375.375v1.875c0 .207.168.375.375.375H16.5v1.125c0 .621-.504 1.125-1.125 1.125H14.25v-1.125c0-.207.168-.375.375-.375h1.875v-1.875a.375.375 0 00-.375-.375H14.25v-1.125c0-.621.504-1.125 1.125-1.125h1.125v1.5c0 .207-.168.375-.375.375H16.5v1.125z" /></svg>);
const KeyIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.937-.628 1.49-.628h1.036a6 6 0 015.912 7.029z" /></svg>);
const ClockIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);
const GlobeAltIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A11.953 11.953 0 0012 13.5c-2.998 0-5.74-1.1-7.843-2.918m0 0A8.959 8.959 0 003 12c0-.778.099-1.533.284-2.253" /></svg>);
const MagnifyingGlassIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" /></svg>);
const FingerPrintIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M7.864 4.243A7.5 7.5 0 0119.5 10.5c0 2.92-.556 5.709-1.588 8.188a7.5 7.5 0 11-12.924 0A7.5 7.5 0 017.864 4.243zM12 15v.01" /></svg>);
const CameraIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.776 48.776 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z" /><path strokeLinecap="round" strokeLinejoin="round" d="M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z" /></svg>);
const ChatBubbleLeftRightIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.72 3.72a1.05 1.05 0 01-1.664-1.223l1.83-5.242a2.25 2.25 0 00-.443-2.387L11.25 8.511c-.884-.284-1.5-1.128-1.5-2.097v-4.286c0-1.136.847-2.1 1.98-2.193l3.72-3.72a1.05 1.05 0 011.664 1.223l-1.83 5.242a2.25 2.25 0 00.443 2.387l3.72 3.72zM3.75 8.511c.884-.284 1.5-1.128 1.5-2.097V2.128c0-1.136.847-2.1 1.98-2.193l3.72-3.72a1.05 1.05 0 011.664 1.223l-1.83 5.242a2.25 2.25 0 00.443 2.387l3.72 3.72c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.72 3.72a1.05 1.05 0 01-1.664-1.223l1.83-5.242a2.25 2.25 0 00-.443-2.387l-3.72-3.72z" /></svg>);
const IdentificationIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5m-7.5-13.5h15a1.5 1.5 0 011.5 1.5v10.5a1.5 1.5 0 01-1.5 1.5h-15a1.5 1.5 0 01-1.5-1.5V6.75a1.5 1.5 0 011.5-1.5z" /></svg>);
const ArrowsRightLeftIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M7.5 21L3 16.5m0 0L7.5 12M3 16.5h18m-7.5-12L21 9m0 0l-4.5 4.5M21 9H3" /></svg>);
const BarsArrowDownIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3 4.5h14.25M3 9h9.75M3 13.5h5.25m5.25-.75L17.25 9m0 0L21 12.75M17.25 9v12" /></svg>);
const TagIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z" /><path strokeLinecap="round" strokeLinejoin="round" d="M6 6h.008v.008H6V6z" /></svg>);
const DocumentCheckIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);
const ArrowsUpDownIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3 7.5L7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" /></svg>);
const AdjustmentsHorizontalIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75" /></svg>);
const PaintBrushIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9.53 16.122a3 3 0 00-5.78 1.128 2.25 2.25 0 01-2.4 2.245 4.5 4.5 0 008.4-2.245c0-.399-.078-.78-.22-1.128zm0 0a15.998 15.998 0 003.388-1.62m-5.043-.025a15.998 15.998 0 013.388-1.62m0 0a15.998 15.998 0 013.388-1.62m0 0a15.998 15.998 0 013.388-1.62m0 0a15.998 15.998 0 013.388-1.62m0 0a15.998 15.998 0 013.388-1.62M12 6.375a3.375 3.375 0 116.75 0 3.375 3.375 0 01-6.75 0z" /></svg>);
const ShareIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M7.217 10.907a2.25 2.25 0 100 2.186m0-2.186c.195.025.39.05.588.08m-5.88-.08a2.25 2.25 0 01-2.186 0c.195.025.39.05.588.08m5.88-.08l-2.186.086m2.186-.086l2.186.086m0 0a2.25 2.25 0 100-2.186m0 2.186c-.195-.025-.39-.05-.588-.08m5.88.08a2.25 2.25 0 012.186 0c-.195-.025-.39-.05-.588-.08m-5.88.08l2.186-.086m-2.186.086l-2.186-.086" /></svg>);
const LinkIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244" /></svg>);
const ArrowRightCircleIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12.75 15l3-3m0 0l-3-3m3 3h-7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);
const ListBulletIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M8.25 6.75h12M8.25 12h12M8.25 17.25h12M3.75 6.75h.007v.008H3.75V6.75zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 12h.007v.008H3.75V12zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 17.25h.007v.008H3.75V17.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" /></svg>);
const SpeakerWaveIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M19.114 5.636a9 9 0 010 12.728M16.463 8.288a5.25 5.25 0 010 7.424M6.75 8.25l4.72-4.72a.75.75 0 011.28.53v15.88a.75.75 0 01-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.01 9.01 0 012.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75z" /></svg>);
const ChartPieIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M10.5 6a7.5 7.5 0 107.5 7.5h-7.5V6z" /><path strokeLinecap="round" strokeLinejoin="round" d="M13.5 10.5H21A7.5 7.5 0 0013.5 3v7.5z" /></svg>);
const StarIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" /></svg>);
const MoonIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" /></svg>);
const BeakerIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M14.25 6.087c0-.355.186-.676.401-.959.221-.29.349-.634.349-1.003 0-1.036-1.007-1.875-2.25-1.875s-2.25.84-2.25 1.875c0 .369.128.713.349 1.003.215.283.401.604.401.959v0a.64.64 0 01-.657.643 48.39 48.39 0 01-4.163-.3c.186 1.613.293 3.25.315 4.907a.656.656 0 01-.658.663v0c-.355 0-.676-.186-.959-.401a1.647 1.647 0 00-1.003-.349c-1.036 0-1.875 1.007-1.875 2.25s.84 2.25 1.875 2.25c.369 0 .713-.128 1.003-.349.283-.215.604-.401.959-.401v0c.31 0 .555.26.532.57a48.039 48.039 0 01-.642 5.056c1.518.19 3.058.309 4.616.354a.64.64 0 00.657-.643v0c0-.355-.186-.676-.401-.959a1.647 1.647 0 01-.349-1.003c0-1.036 1.007-1.875 2.25-1.875s2.25.84 2.25 1.875c0 .369-.128.713-.349 1.003-.215.283-.401.604-.401.959v0c0 .333.277.599.61.58a48.1 48.1 0 005.429-.649c3.026-7.118 4.226-16.649 4.226-25.214 0-1.284-1.036-2.32-2.32-2.32s-2.32 1.036-2.32 2.32c0 8.565-1.09 17.02-3.088 24.512z" /></svg>);
const ChatBubbleBottomCenterTextIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M18 12.75H6M12 15.75h.008v.008H12v-.008z" /><path strokeLinecap="round" strokeLinejoin="round" d="M21.75 12.75c0 6.21-5.04 11.25-11.25 11.25S.75 18.96.75 12.75.75 1.5 10.5 1.5c4.14 0 7.793 2.239 9.803 5.5l.345.516a.75.75 0 01-1.125.828l-.31-.423a8.966 8.966 0 00-1.604-2.075c-.75-1.012-1.7-1.815-2.793-2.32a9.01 9.01 0 00-3.32 0c-1.093.505-2.043 1.308-2.793 2.32a8.968 8.968 0 00-1.604 2.075l-.31.423a.75.75 0 01-1.125-.828l.345-.516A11.22 11.22 0 0110.5 1.5c6.21 0 11.25 5.04 11.25 11.25z" /></svg>);
const DocumentMagnifyingGlassIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m5.231 13.481L15 17.25m-4.5 4.5l-2.25-2.25M6.75 12a5.25 5.25 0 1110.5 0 5.25 5.25 0 01-10.5 0z" /></svg>);
const BookOpenIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18c-2.305 0-4.408.867-6 2.292m0-14.25v14.25" /></svg>);
const EnvelopeIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25-2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" /></svg>);
const ChartBarIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z" /></svg>);
const ComputerDesktopIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0115 18.257V17.25m6-12V15a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 15V5.25A2.25 2.25 0 015.25 3h13.5A2.25 2.25 0 0121 5.25z" /></svg>);
const Square2StackIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9 4.5v15m6-15v15m-10.875 0h15.75c.621 0 1.125-.504 1.125-1.125V5.625c0-.621-.504-1.125-1.125-1.125H4.125C3.504 4.5 3 5.004 3 5.625v12.75c0 .621.504 1.125 1.125 1.125z" /></svg>);
const MagnifyingGlassCircleIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" /></svg>);
const AtSymbolIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M16.5 12a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zm0 0c0 1.657 1.007 3 2.25 3S21 13.657 21 12a9 9 0 10-2.636 6.364M16.5 12V8.25" /></svg>);
const ArrowsPointingOutIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15" /></svg>);
const CubeIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M21 7.5l-9-5.25L3 7.5m18 0l-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9" /></svg>);
const RectangleGroupIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M2.25 7.125A2.25 2.25 0 014.5 4.875h15A2.25 2.25 0 0121.75 7.125v10.5A2.25 2.25 0 0119.5 19.875h-15A2.25 2.25 0 012.25 17.625V7.125z" /></svg>);
const ScaleIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75M12 20.25c1.472 0 2.882.265 4.185.75M18.75 4.97A48.416 48.416 0 0012 4.5c-2.291 0-4.545.16-6.75.47m13.5 0c1.01.143 2.01.317 3 .52m-3-.52l2.62 10.726c.122.499-.106 1.028-.589 1.202a5.988 5.988 0 01-2.036.243c-2.132 0-4.14-.352-6.07-.993M15.75 4.97v5.378c0 .828.672 1.5 1.5 1.5H19.5M6.25 4.97A48.416 48.416 0 0112 4.5c2.291 0 4.545.16 6.75.47M6.25 4.97C5.24 5.114 4.24 5.288 3.25 5.49m3 .02l-2.62 10.726c-.122.499.106 1.028.589 1.202a5.989 5.989 0 002.036.243c2.132 0 4.14-.352 6.07-.993M9.25 4.97v5.378c0 .828-.672 1.5-1.5 1.5H4.5" /></svg>);

// --- NEW ICONS (25) ---
const MagnifyingGlassArrowsIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.667 0l3.181-3.183m-11.667 0l3.181-3.183a8.25 8.25 0 00-11.667 0l3.181 3.183M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>);
const DocumentMinusIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);
const ArrowPathRoundedSquareIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.667 0l3.181-3.183m-11.667 0l3.181-3.183a8.25 8.25 0 00-11.667 0l3.181 3.183M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);
const ChartBarSquareIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M7.5 14.25v2.25m3-4.5v4.5m3-6.75v6.75m3-9v9M6 20.25h12A2.25 2.25 0 0020.25 18V6A2.25 2.25 0 0018 3.75H6A2.25 2.25 0 003.75 6v12A2.25 2.25 0 006 20.25z" /></svg>);
const ArrowUturnLeftIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3" /></svg>);
const CircleHalfStrokeIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 3v18m9-9a9 9 0 00-9-9h.01M21 12a9 9 0 01-9 9h-.01M12 3a9 9 0 010 18H5.99M12 21a9 9 0 000-18h.01" /></svg>);
const FaceSmileIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);
const SquaresPlusIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15M8.25 21a2.25 2.25 0 002.25-2.25H13.5A2.25 2.25 0 0015.75 21" /><path strokeLinecap="round" strokeLinejoin="round" d="M3.75 3.75A2.25 2.25 0 001.5 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V6a2.25 2.25 0 00-2.25-2.25H3.75z" /></svg>);
const CodeBracketSquareIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M14.25 9.75L16.5 12l-2.25 2.25m-4.5 0L7.5 12l2.25-2.25M6 20.25h12A2.25 2.25 0 0020.25 18V6A2.25 2.25 0 0018 3.75H6A2.25 2.25 0 003.75 6v12A2.25 2.25 0 006 20.25z" /></svg>);
const CircleStackIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /><path strokeLinecap="round" strokeLinejoin="round" d="M9 9.563C9 9.252 9.252 9 9.563 9h4.874c.311 0 .563.252.563.563v4.874c0 .311-.252.563-.563.563H9.563A.562.562 0 019 14.437V9.563z" /></svg>);
const RectangleStackIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M6.429 9.75L2.25 12l4.179 2.25m0-4.5l5.571 3 5.571-3m-11.142 0L2.25 12l4.179 2.25M6.429 9.75L12 12.25l5.571-2.5M12 12.25v6.5" /></svg>);
const TableCellsIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9 4.5v15m6-15v15m-10.875 0h15.75c.621 0 1.125-.504 1.125-1.125V5.625c0-.621-.504-1.125-1.125-1.125H4.125C3.504 4.5 3 5.004 3 5.625v12.75c0 .621.504 1.125 1.125 1.125z" /></svg>);
const FunnelIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 3v18m9-9a9 9 0 00-9-9h.01M21 12a9 9 0 01-9 9h-.01" /></svg>);
const PlayCircleIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /><path strokeLinecap="round" strokeLinejoin="round" d="M15.91 11.672a.375.375 0 010 .656l-5.603 3.113a.375.375 0 01-.557-.328V8.887c0-.286.307-.466.557-.327l5.603 3.112z" /></svg>);
const ChatBubbleOvalLeftEllipsisIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.76 9.76 0 01-2.53-.388A9.864 9.864 0 013 21c-.713 0-1.407-.056-2.052-.163a1.425 1.425 0 01-.97-1.543c.23-2.112.652-4.113.98-6.034a11.25 11.25 0 01-1.62-5.32c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z" /></svg>);
const DocumentQuestionMarkIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" /></svg>);
const ArrowsPointingInIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9 9V4.5M9 9H4.5M9 9L3.75 3.75M9 15v5.5M9 15H4.5M9 15l-5.25 5.25M15 9V4.5M15 9h5.5M15 9l5.25-5.25M15 15v5.5M15 15h5.5M15 15l5.25 5.25" /></svg>);
const CurveIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3 21c1.657 0 3-1.343 3-3V6c0-1.657-1.343-3-3-3m0 18h18" /></svg>);
const DocumentArrowDownIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m-1.125 9l3 3m0 0l3-3m-3 3v-6.75" /></svg>);
const CommandLineIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M6.75 7.5l3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0021 18V6a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6v12a2.25 2.25 0 002.25 2.25z" /></svg>);
const LightBulbIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 18v-5.25m0 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m3.75 7.478a12.06 12.06 0 01-4.5 0m3.75 2.311a7.5 7.5 0 01-7.5 0c-1.421-.024-2.813-.2-4.09-.542M19.5 12c0-5.962-4.04-10.9-9-11.622C4.54 1.1 0 5.962 0 12c0 5.962 4.04 10.9 9 11.622 2.41.362 4.9.362 7.313 0C20.439 21.83 24 17.439 24 12c0-2.81-.803-5.38-2.182-7.522" /></svg>);

// --- NEW ICONS (10) ---
const ShieldCheckIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.623 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.602-3.751A11.959 11.959 0 0112 2.75z" /></svg>);
const EyeSlashIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.243 4.243l-4.243-4.243" /></svg>);
const CropIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M7.5 3.75H6A2.25 2.25 0 003.75 6v1.5M16.5 3.75H18A2.25 2.25 0 0120.25 6v1.5m0 9V18A2.25 2.25 0 0118 20.25h-1.5m-9 0H6A2.25 2.25 0 013.75 18v-1.5M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>);
const Squares2X2Icon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6A2.25 2.25 0 016 3.75h2.25A2.25 2.25 0 0110.5 6v2.25a2.25 2.25 0 01-2.25 2.25H6A2.25 2.25 0 013.75 8.25V6zM3.75 15.75A2.25 2.25 0 016 13.5h2.25a2.25 2.25 0 012.25 2.25V18a2.25 2.25 0 01-2.25 2.25H6A2.25 2.25 0 013.75 18v-2.25zM13.5 6a2.25 2.25 0 012.25-2.25H18A2.25 2.25 0 0120.25 6v2.25A2.25 2.25 0 0118 10.5h-2.25a2.25 2.25 0 01-2.25-2.25V6zM13.5 15.75a2.25 2.25 0 012.25-2.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-2.25A2.25 2.25 0 0113.5 18v-2.25z" /></svg>);
const AdjustmentsVerticalIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M6 13.5V3.75m0 9.75a1.5 1.5 0 010 3m0-3a1.5 1.5 0 000 3m0 3.75V16.5m12-3V3.75m0 9.75a1.5 1.5 0 010 3m0-3a1.5 1.5 0 000 3m0 3.75V16.5m-6-9V3.75m0 3a1.5 1.5 0 010 3m0-3a1.5 1.5 0 000 3m0 9.75V10.5" /></svg>);

// --- HACKING ICONS (3) ---
const CalculatorIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M15.75 15.75V18m-7.5-6.75h.008v.008H8.25v-.008zm0 3h.008v.008H8.25v-.008zm0 3h.008v.008H8.25v-.008zm3-6h.008v.008H11.25v-.008zm0 3h.008v.008H11.25v-.008zm0 3h.008v.008H11.25v-.008zm3-6h.008v.008H14.25v-.008zm0 3h.008v.008H14.25v-.008zm0 3h.008v.008H14.25v-.008zM6 18V9.75a3 3 0 013-3h6a3 3 0 013 3v8.25a3 3 0 01-3 3H9a3 3 0 01-3-3z" /></svg>);
const BugAntIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M12 21a9 9 0 100-18 9 9 0 000 18z" /><path strokeLinecap="round" strokeLinejoin="round" d="M15.91 16.09a4.5 4.5 0 01-6.23-6.23l-3.08 3.08a4.5 4.5 0 016.23 6.23l3.08-3.08z" /><path strokeLinecap="round" strokeLinejoin="round" d="M9 7.5h6" /><path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v3" /></svg>);
const WifiIcon: React.FC<{className?: string}> = (props) => (<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}><path strokeLinecap="round" strokeLinejoin="round" d="M8.288 15.038a7.5 7.5 0 015.424 0M5.136 11.886c3.87-3.87 10.16-3.87 14.03.002M12 18.75h.008v.008H12v-.008z" /></svg>);



export const ALL_TOOLS: Tool[] = [
    { id: 'ai-commit-generator', name: 'AI Commit Message Generator', description: 'Generate commit messages from git diffs.', category: ToolCategory.AI, icon: SparklesIcon, component: CommitMessageGenerator },
    { id: 'ai-meme-generator', name: 'Advanced AI Meme Generator', description: 'Create multi-panel memes with AI-powered caption suggestions.', category: ToolCategory.AI, icon: SparklesIcon, component: MemeGenerator },
    
    // Text Tools
    { id: 'case-converter', name: 'Case Converter', description: 'Change text to various cases.', category: ToolCategory.TEXT, icon: Bars3BottomLeftIcon, component: CaseConverter },
    { id: 'word-counter', name: 'Word Counter', description: 'Count words and characters.', category: ToolCategory.TEXT, icon: HashtagIcon, component: WordCounter },
    { id: 'lorem-ipsum', name: 'Lorem Ipsum Generator', description: 'Generate placeholder text.', category: ToolCategory.TEXT, icon: DocumentIcon, component: LoremIpsumGenerator },
    { id: 'json-formatter', name: 'JSON Formatter', description: 'Format and validate JSON.', category: ToolCategory.TEXT, icon: CodeBracketIcon, component: JsonFormatter },
    { id: 'text-sorter', name: 'Text Sorter', description: 'Sort lines of text alphabetically, by length, etc.', category: ToolCategory.TEXT, icon: BarsArrowDownIcon, component: TextSorter },
    { id: 'diff-checker', name: 'Diff Checker', description: 'Compare two text blocks for differences.', category: ToolCategory.TEXT, icon: ArrowsUpDownIcon, component: DiffChecker },
    { id: 'base64-converter', name: 'Base64 Converter', description: 'Encode/decode Base64 strings.', category: ToolCategory.TEXT, icon: ArrowPathIcon, component: Base64Converter },
    { id: 'url-encoder', name: 'URL Encoder/Decoder', description: 'Encode/decode URL components.', category: ToolCategory.TEXT, icon: ArrowPathIcon, component: UrlEncoder },
    { id: 'markdown-preview', name: 'Markdown Previewer', description: 'Live preview for Markdown.', category: ToolCategory.TEXT, icon: DocumentIcon, component: MarkdownPreviewer },
    { id: 'char-code-converter', name: 'Character Code Converter', description: 'Convert text to ASCII, Hex, or Binary.', category: ToolCategory.TEXT, icon: ArrowRightCircleIcon, component: CharCodeConverter },
    { id: 'toc-generator', name: 'ToC Generator', description: 'Create a table of contents from text.', category: ToolCategory.TEXT, icon: ListBulletIcon, component: TocGenerator },
    { id: 'text-to-speech', name: 'Text to Speech Reader', description: 'Listen to your text read aloud.', category: ToolCategory.TEXT, icon: SpeakerWaveIcon, component: TextToSpeech },
    { id: 'regex-explainer', name: 'Regex Explainer', description: 'Breaks down regex into plain English.', category: ToolCategory.TEXT, icon: ChartPieIcon, component: RegexExplainer },
    { id: 'slugify', name: 'Slugify', description: 'Convert text into a URL-friendly slug.', category: ToolCategory.TEXT, icon: AtSymbolIcon, component: Slugify },
    { id: 'find-and-replace', name: 'Find and Replace', description: 'Find & replace text with advanced options.', category: ToolCategory.TEXT, icon: MagnifyingGlassArrowsIcon, component: FindAndReplace },
    { id: 'duplicate-line-remover', name: 'Duplicate Line Remover', description: 'Remove duplicate lines from text.', category: ToolCategory.TEXT, icon: DocumentMinusIcon, component: DuplicateLineRemover },
    { id: 'reverse-text', name: 'Reverse Text', description: 'Reverse text, or each line individually.', category: ToolCategory.TEXT, icon: ArrowsRightLeftIcon, component: ReverseText },
    { id: 'rot13-converter', name: 'ROT13 Converter', description: 'Apply the ROT13 substitution cipher.', category: ToolCategory.TEXT, icon: ArrowPathRoundedSquareIcon, component: Rot13Converter },
    { id: 'text-statistics', name: 'Text Statistics', description: 'Calculate reading time and other stats.', category: ToolCategory.TEXT, icon: ChartBarSquareIcon, component: TextStatistics },
    { id: 'morse-code-converter', name: 'Morse Code Converter', description: 'Translate text to and from Morse code.', category: ToolCategory.TEXT, icon: ChatBubbleOvalLeftEllipsisIcon, component: MorseCodeConverter },

    // Image Tools
    { id: 'image-to-base64', name: 'Image to Base64', description: 'Convert images to Base64 strings.', category: ToolCategory.IMAGE, icon: ArrowPathIcon, component: ImageToBase64 },
    { id: 'color-picker-image', name: 'Color Picker from Image', description: 'Pick colors from an image.', category: ToolCategory.IMAGE, icon: EyeDropperIcon, component: ColorPickerFromImage },
    { id: 'favicon-generator', name: 'Favicon Generator', description: 'Create favicons from an image.', category: ToolCategory.IMAGE, icon: SparklesIcon, component: FaviconGenerator },
    { id: 'aspect-ratio-calculator', name: 'Aspect Ratio Calculator', description: 'Calculate image/video ratios.', category: ToolCategory.IMAGE, icon: PhotoIcon, component: AspectRatioCalculator },
    { id: 'svg-converter', name: 'SVG Converter', description: 'Convert SVG to PNG or JPEG.', category: ToolCategory.IMAGE, icon: ArrowsRightLeftIcon, component: SVGConverter },
    { id: 'css-filter-generator', name: 'CSS Filter Generator', description: 'Create CSS filter styles for images.', category: ToolCategory.IMAGE, icon: AdjustmentsHorizontalIcon, component: CssFilterGenerator },
    { id: 'svg-placeholder', name: 'SVG Placeholder Generator', description: 'Create custom SVG placeholders.', category: ToolCategory.IMAGE, icon: PhotoIcon, component: SvgPlaceholderGenerator },
    { id: 'image-inspector', name: 'Image Inspector & Steganography', description: 'View EXIF data and hide/reveal secret messages in images.', category: ToolCategory.IMAGE, icon: MagnifyingGlassCircleIcon, component: ImageInspector },
    { id: 'css-shape-generator', name: 'CSS Shape Generator', description: 'Visually create complex CSS shapes.', category: ToolCategory.IMAGE, icon: StarIcon, component: CssShapeGenerator },
    { id: 'grayscale-converter', name: 'Grayscale Converter', description: 'Convert any image to grayscale.', category: ToolCategory.IMAGE, icon: MoonIcon, component: GrayscaleConverter },
    { id: 'image-resizer', name: 'Image Resizer', description: 'Resize images to specific dimensions.', category: ToolCategory.IMAGE, icon: ArrowsPointingOutIcon, component: ImageResizer },
    { id: 'image-compressor', name: 'Image Compressor', description: 'Compress images to a target file size.', category: ToolCategory.IMAGE, icon: DocumentArrowDownIcon, component: ImageCompressor },
    { id: 'image-flipper', name: 'Image Flipper & Rotator', description: 'Flip and rotate images.', category: ToolCategory.IMAGE, icon: ArrowUturnLeftIcon, component: ImageFlipper },
    { id: 'image-color-inverter', name: 'Image Color Inverter', description: 'Invert the colors of an image.', category: ToolCategory.IMAGE, icon: CircleHalfStrokeIcon, component: ImageColorInverter },
    { id: 'image-border-adder', name: 'Image Border Adder', description: 'Add a colored border to an image.', category: ToolCategory.IMAGE, icon: SquaresPlusIcon, component: ImageBorderAdder },
    { id: 'image-to-ascii', name: 'Image to ASCII Art', description: 'Convert images into ASCII text art.', category: ToolCategory.IMAGE, icon: CodeBracketSquareIcon, component: ImageToAscii },
    { id: 'image-cropper', name: 'Image Cropper', description: 'Visually crop an image to specific dimensions.', category: ToolCategory.IMAGE, icon: CropIcon, component: ImageCropper },
    
    // Color Tools
    { id: 'color-converter', name: 'Color Converter', description: 'Convert HEX, RGB, HSL values.', category: ToolCategory.COLOR, icon: ArrowPathIcon, component: ColorConverter },
    { id: 'gradient-generator', name: 'Gradient Generator', description: 'Create CSS color gradients.', category: ToolCategory.COLOR, icon: SwatchIcon, component: GradientGenerator },
    { id: 'color-palette-generator', name: 'Color Palette Generator', description: 'Generate color palettes.', category: ToolCategory.COLOR, icon: SparklesIcon, component: ColorPaletteGenerator },
    { id: 'shade-tint-generator', name: 'Shade & Tint Generator', description: 'Generate lighter and darker shades.', category: ToolCategory.COLOR, icon: SwatchIcon, component: ShadeAndTintGenerator },
    { id: 'contrast-checker', name: 'Contrast Checker', description: 'Check WCAG color contrast.', category: ToolCategory.COLOR, icon: EyeDropperIcon, component: ContrastChecker },
    { id: 'color-blender', name: 'Color Blender', description: 'Mix two colors to create a palette.', category: ToolCategory.COLOR, icon: PaintBrushIcon, component: ColorBlender },
    { id: 'accessible-palette', name: 'Accessible Color Suggester', description: 'Find accessible color combinations.', category: ToolCategory.COLOR, icon: BeakerIcon, component: AccessibleColorSuggester },
    { id: 'color-name-finder', name: 'Color Name Finder', description: 'Find the name of any color.', category: ToolCategory.COLOR, icon: TagIcon, component: ColorNameFinder },
    { id: 'image-palette-extractor', name: 'Image Palette Extractor', description: 'Extract a palette from an image.', category: ToolCategory.COLOR, icon: SwatchIcon, component: ImagePaletteExtractor },
    { id: 'css-filter-playground', name: 'CSS Filter Playground', description: 'See how CSS filters affect a color.', category: ToolCategory.COLOR, icon: AdjustmentsHorizontalIcon, component: CssFilterPlayground },
    { id: 'random-color-generator', name: 'Random Color Palette', description: 'Generate random color palettes.', category: ToolCategory.COLOR, icon: CubeIcon, component: RandomColorGenerator },
    { id: 'color-harmonies', name: 'Color Harmonies', description: 'Calculate color harmony schemes.', category: ToolCategory.COLOR, icon: CircleStackIcon, component: ColorHarmonies },
    { id: 'tailwind-shade-generator', name: 'Tailwind Shade Generator', description: 'Generate a Tailwind-like color scale.', category: ToolCategory.COLOR, icon: RectangleStackIcon, component: TailwindShadeGenerator },
    { id: 'wcag-contrast-grid', name: 'WCAG Contrast Grid', description: 'Test multiple color pairs for contrast.', category: ToolCategory.COLOR, icon: TableCellsIcon, component: WcagContrastGrid },
    { id: 'average-color-finder', name: 'Average Color Finder', description: 'Find the average color of an image.', category: ToolCategory.COLOR, icon: FunnelIcon, component: AverageColorFinder },
    { id: 'gradient-text-generator', name: 'Gradient Text Generator', description: 'Create CSS for gradient text.', category: ToolCategory.COLOR, icon: PaintBrushIcon, component: GradientTextGenerator },
    { id: 'color-blindness-simulator', name: 'Color Blindness Simulator', description: 'Simulate different types of color vision deficiency.', category: ToolCategory.COLOR, icon: EyeSlashIcon, component: ColorBlindnessSimulator },
    { id: 'css-blend-mode-previewer', name: 'CSS Blend Mode Previewer', description: 'Preview CSS background-blend-mode effects.', category: ToolCategory.COLOR, icon: AdjustmentsVerticalIcon, component: CssBlendModePreviewer },

    // Social & Content Tools
    { id: 'yt-thumbnail-downloader', name: 'YT Thumbnail Downloader', description: 'Download YouTube thumbnails.', category: ToolCategory.SOCIAL_CONTENT, icon: ViewfinderCircleIcon, component: YTThumbnailDownloader },
    { id: 'qr-code-generator', name: 'QR Code Generator', description: 'Create QR codes from text/URLs.', category: ToolCategory.SOCIAL_CONTENT, icon: QrCodeIcon, component: QrCodeGenerator },
    { id: 'meta-tag-generator', name: 'Meta Tag Generator', description: 'Generate SEO and social meta tags.', category: ToolCategory.SOCIAL_CONTENT, icon: TagIcon, component: MetaTagGenerator },
    { id: 'social-share-preview', name: 'Social Share Previewer', description: 'Preview how links look on social media.', category: ToolCategory.SOCIAL_CONTENT, icon: ShareIcon, component: SocialSharePreviewer },
    { id: 'tweet-threader', name: 'Tweet Thread Splitter', description: 'Split long text into a tweet thread.', category: ToolCategory.SOCIAL_CONTENT, icon: ChatBubbleBottomCenterTextIcon, component: TweetThreader },
    { id: 'og-debugger', name: 'Open Graph Debugger', description: 'Analyze OG tags from HTML source.', category: ToolCategory.SOCIAL_CONTENT, icon: DocumentMagnifyingGlassIcon, component: OgDebugger },
    { id: 'readability-score', name: 'Readability Score', description: 'Calculate readability of text.', category: ToolCategory.SOCIAL_CONTENT, icon: BookOpenIcon, component: ReadabilityScore },
    { id: 'email-signature', name: 'Email Signature Generator', description: 'Create a professional email signature.', category: ToolCategory.SOCIAL_CONTENT, icon: EnvelopeIcon, component: EmailSignatureGenerator },
    { id: 'placeholder-image-generator', name: 'Placeholder Image Generator', description: 'Generate placeholder images for mockups.', category: ToolCategory.SOCIAL_CONTENT, icon: RectangleGroupIcon, component: PlaceholderImageGenerator },
    { id: 'hashtag-counter', name: 'Hashtag Counter', description: 'Count the hashtags in a piece of text.', category: ToolCategory.SOCIAL_CONTENT, icon: HashtagIcon, component: HashtagCounter },
    { id: 'yt-timestamp-link', name: 'YouTube Timestamp Link', description: 'Create a YouTube link for a specific time.', category: ToolCategory.SOCIAL_CONTENT, icon: PlayCircleIcon, component: YouTubeTimestampLink },
    { id: 'twitter-post-preview', name: 'Twitter Post Previewer', description: 'See how a tweet will look.', category: ToolCategory.SOCIAL_CONTENT, icon: ChatBubbleOvalLeftEllipsisIcon, component: TwitterPostPreview },
    { id: 'list-formatter', name: 'List Formatter', description: 'Add bullets or numbers to a list.', category: ToolCategory.SOCIAL_CONTENT, icon: ListBulletIcon, component: ListFormatter },
    { id: 'lorem-picsum-generator', name: 'Lorem Picsum Generator', description: 'Get placeholder images from Picsum.', category: ToolCategory.SOCIAL_CONTENT, icon: PhotoIcon, component: LoremPicsumGenerator },

    // Developer Tools
    { id: 'password-generator', name: 'Password Generator', description: 'Generate secure passwords.', category: ToolCategory.DEVELOPER, icon: KeyIcon, component: PasswordGenerator },
    { id: 'hash-generator', name: 'Hash Generator', description: 'Generate SHA hashes from text.', category: ToolCategory.DEVELOPER, icon: CodeBracketIcon, component: HashGenerator },
    { id: 'file-hash-checker', name: 'File Hash Checker', description: 'Calculate hashes of local files.', category: ToolCategory.DEVELOPER, icon: DocumentCheckIcon, component: FileHashChecker },
    { id: 'timestamp-converter', name: 'Unix Timestamp Converter', description: 'Convert Unix timestamps.', category: ToolCategory.DEVELOPER, icon: ClockIcon, component: UnixTimestampConverter },
    { id: 'user-agent', name: 'My User Agent', description: 'Display your user agent.', category: ToolCategory.DEVELOPER, icon: GlobeAltIcon, component: UserAgent },
    { id: 'ip-address', name: 'My IP Address', description: 'Find your public IP address.', category: ToolCategory.DEVELOPER, icon: GlobeAltIcon, component: IpAddress },
    { id: 'regex-tester', name: 'Regex Tester', description: 'Test regular expressions.', category: ToolCategory.DEVELOPER, icon: MagnifyingGlassIcon, component: RegexTester },
    { id: 'jwt-decoder', name: 'JWT Decoder', description: 'Decode JSON Web Tokens.', category: ToolCategory.DEVELOPER, icon: FingerPrintIcon, component: JwtDecoder },
    { id: 'url-parser', name: 'URL Parser', description: 'Break down URLs into components.', category: ToolCategory.DEVELOPER, icon: LinkIcon, component: UrlParser },
    { id: 'advanced-screenshot', name: 'Advanced Screenshot', description: 'Capture and analyze web pages.', category: ToolCategory.DEVELOPER, icon: CameraIcon, component: AdvancedScreenshotTool },
    { id: 'json-to-type', name: 'JSON to Type Converter', description: 'Convert JSON to TS interfaces.', category: ToolCategory.DEVELOPER, icon: ArrowsRightLeftIcon, component: JSONtoTypeConverter },
    { id: 'uuid-generator', name: 'UUID Generator', description: 'Generate v4 UUIDs.', category: ToolCategory.DEVELOPER, icon: IdentificationIcon, component: UUIDGenerator },
    { id: 'cron-parser', name: 'CRON Job Parser', description: 'Parse CRON strings into English.', category: ToolCategory.DEVELOPER, icon: ClockIcon, component: CronJobParser },
    { id: 'css-easing-visualizer', name: 'CSS Easing Visualizer', description: 'Visualize CSS animation curves.', category: ToolCategory.DEVELOPER, icon: ChartBarIcon, component: CssEasingVisualizer },
    { id: 'http-inspector', name: 'HTTP Inspector', description: 'Inspect HTTP responses with custom methods & headers.', category: ToolCategory.DEVELOPER, icon: DocumentMagnifyingGlassIcon, component: HttpStatusCodeChecker },
    { id: 'keyboard-event-finder', name: 'Keyboard Event Finder', description: 'Inspect JavaScript key events.', category: ToolCategory.DEVELOPER, icon: ComputerDesktopIcon, component: KeyboardEventFinder },
    { id: 'box-shadow-generator', name: 'Box Shadow Generator', description: 'Create layered CSS box shadows.', category: ToolCategory.DEVELOPER, icon: Square2StackIcon, component: BoxShadowGenerator },
    { id: 'px-to-rem-converter', name: 'PX to REM/EM Converter', description: 'Convert pixels to relative units.', category: ToolCategory.DEVELOPER, icon: ScaleIcon, component: PxToRemConverter },
    { id: 'css-unit-converter', name: 'CSS Unit Converter', description: 'Convert between various CSS units.', category: ToolCategory.DEVELOPER, icon: ScaleIcon, component: CssUnitConverter },
    { id: 'mime-type-finder', name: 'MIME Type Finder', description: 'Find a MIME type by file extension.', category: ToolCategory.DEVELOPER, icon: DocumentQuestionMarkIcon, component: MimeTypeFinder },
    { id: 'html-entity-converter', name: 'HTML Entity Converter', description: 'Encode/decode HTML special characters.', category: ToolCategory.DEVELOPER, icon: ArrowsRightLeftIcon, component: HtmlEntityConverter },
    { id: 'css-minifier', name: 'CSS Minifier', description: 'Minify CSS by removing whitespace.', category: ToolCategory.DEVELOPER, icon: ArrowsPointingInIcon, component: CssMinifier },
    { id: 'cubic-bezier-generator', name: 'Cubic Bezier Generator', description: 'Visually create CSS easing functions.', category: ToolCategory.DEVELOPER, icon: CurveIcon, component: CubicBezierGenerator },
    { id: 'json-to-csv', name: 'JSON to CSV Converter', description: 'Convert JSON arrays into CSV format.', category: ToolCategory.DEVELOPER, icon: TableCellsIcon, component: JsonToCsvConverter },
    { id: 'timezone-converter', name: 'Timezone Converter', description: 'Convert times between different timezones.', category: ToolCategory.DEVELOPER, icon: GlobeAltIcon, component: TimezoneConverter },
    { id: 'base-converter', name: 'Base Converter', description: 'Convert numbers between different bases.', category: ToolCategory.DEVELOPER, icon: CodeBracketSquareIcon, component: BaseConverter },
    { id: 'sql-formatter', name: 'SQL Formatter', description: 'Format SQL queries to be more readable.', category: ToolCategory.DEVELOPER, icon: CircleStackIcon, component: SqlFormatter },
    { id: 'hmac-generator', name: 'HMAC Generator', description: 'Generate HMAC hashes with a secret key.', category: ToolCategory.DEVELOPER, icon: ShieldCheckIcon, component: HmacGenerator },
    { id: 'css-grid-generator', name: 'CSS Grid Generator', description: 'Visually create CSS grid layouts.', category: ToolCategory.DEVELOPER, icon: Squares2X2Icon, component: CssGridLayoutGenerator },

     // Hacking Tools
    { id: 'subnet-calculator', name: 'Subnet Calculator', description: 'Calculate network info from IP/CIDR.', category: ToolCategory.HACKING, icon: CalculatorIcon, component: SubnetCalculator },
    { id: 'whois-lookup', name: 'WHOIS Lookup', description: 'Get registration data for a domain.', category: ToolCategory.HACKING, icon: GlobeAltIcon, component: WhoisLookup },
    { id: 'dns-lookup', name: 'DNS Lookup', description: 'Query DNS records for a domain.', category: ToolCategory.HACKING, icon: GlobeAltIcon, component: DnsLookup },
    { id: 'reverse-ip-lookup', name: 'Reverse IP Lookup', description: 'Find domains on the same IP.', category: ToolCategory.HACKING, icon: GlobeAltIcon, component: ReverseIpLookup },
    { id: 'security-header-scanner', name: 'Security Header Scanner', description: 'Check a URL for security headers.', category: ToolCategory.HACKING, icon: ShieldCheckIcon, component: SecurityHeaderScanner },
    { id: 'xss-payload-generator', name: 'XSS Payload Generator', description: 'Generate common XSS payloads.', category: ToolCategory.HACKING, icon: BeakerIcon, component: XssPayloadGenerator },
    { id: 'cve-search', name: 'CVE Search', description: 'Look up CVE vulnerability details.', category: ToolCategory.HACKING, icon: BugAntIcon, component: CveSearch },
    { id: 'exif-viewer', name: 'EXIF Data Viewer', description: 'Extract metadata from JPEG images.', category: ToolCategory.HACKING, icon: PhotoIcon, component: ExifViewer },
    { id: 'port-scanner', name: 'Basic Port Scanner', description: 'Check common web ports on a host.', category: ToolCategory.HACKING, icon: WifiIcon, component: PortScanner },
    { id: 'password-strength', name: 'Password Strength Analyzer', description: 'Analyze password strength and entropy.', category: ToolCategory.HACKING, icon: KeyIcon, component: PasswordStrengthAnalyzer },
];

export const TOOL_MAP: Record<string, Tool> = ALL_TOOLS.reduce((acc, tool) => {
    acc[tool.id] = tool;
    return acc;
}, {} as Record<string, Tool>);
